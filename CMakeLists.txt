cmake_minimum_required(VERSION 3.16)

project(immersion VERSION 0.1 LANGUAGES CXX)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(BUILD_WITH_QT6 "Build qtkeychain with Qt 6" ON)

find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets Network Concurrent)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets Network Concurrent)

# Add include directories
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)

# Set UI file directory for AutoUic
set(CMAKE_AUTOUIC_SEARCH_PATHS ${CMAKE_CURRENT_SOURCE_DIR}/ui)

set(PROJECT_SOURCES
    src/AppDataManager.cpp
    include/AppDataManager.h
    src/OpenAICommunicator.cpp
    include/OpenAICommunicator.h
    src/SettingsManager.cpp
    include/SettingsManager.h
    src/KeychainManager.cpp
    include/KeychainManager.h
    src/main.cpp
    src/mainwindow.cpp
    include/mainwindow.h
    ui/mainwindow.ui
    include/progressdialog.h
    src/progressdialog.cpp
    ui/progressdialog.ui
    src/ApiKeyDialog.cpp
    include/ApiKeyDialog.h
    src/PromptEditDialog.cpp
    include/PromptEditDialog.h
    src/FeedbackDialog.cpp
    include/FeedbackDialog.h
    src/SingleInstance.cpp
    include/SingleInstance.h
)

add_subdirectory("external/qtkeychain" qtkeychain_build)

if (WIN32)
#! [appicon_windows]
    set(APP_ICON_RESOURCE_WINDOWS "${CMAKE_CURRENT_SOURCE_DIR}/resources/resources.rc")
    qt_add_executable(immersion
        MANUAL_FINALIZATION
        ${PROJECT_SOURCES}
        ${APP_ICON_RESOURCE_WINDOWS}
    )
#! [appicon_windows]
elseif (APPLE)
#! [appicon_macOS]
    # The MACOSX_BUNDLE_ICON_FILE variable is added to the Info.plist
    # generated by CMake. This variable contains the .icns file name,
    # without the path.
    set(MACOSX_BUNDLE_ICON_FILE Immersion.icns)

    # And the following tells CMake where to find and install the file itself.
    set(app_icon_macos "${CMAKE_CURRENT_SOURCE_DIR}/resources/Immersion.icns")
    set_source_files_properties(${app_icon_macos} PROPERTIES
           MACOSX_PACKAGE_LOCATION "Resources")

    qt_add_executable(immersion MACOSX_BUNDLE MANUAL_FINALIZATION ${PROJECT_SOURCES} ${app_icon_macos})
#! [appicon_macOS]
else()
    qt_add_executable(immersion MANUAL_FINALIZATION ${PROJECT_SOURCES})
endif()

target_link_libraries(immersion PRIVATE Qt${QT_VERSION_MAJOR}::Widgets Qt${QT_VERSION_MAJOR}::Network Qt${QT_VERSION_MAJOR}::Concurrent)
target_link_libraries(immersion PRIVATE qt6keychain)

# Qt for iOS sets MACOSX_BUNDLE_GUI_IDENTIFIER automatically since Qt 6.1.
# If you are developing for iOS or macOS you should consider setting an
# explicit, fixed bundle identifier manually though.
if(${QT_VERSION} VERSION_LESS 6.1.0)
  set(BUNDLE_ID_OPTION MACOSX_BUNDLE_GUI_IDENTIFIER com.example.immersion)
endif()
set_target_properties(immersion PROPERTIES
    ${BUNDLE_ID_OPTION}
    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
    MACOSX_BUNDLE TRUE
    WIN32_EXECUTABLE TRUE
)

include(GNUInstallDirs)
install(TARGETS immersion
    BUNDLE DESTINATION .
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

if(QT_VERSION_MAJOR EQUAL 6)
    qt_finalize_executable(immersion)
endif()
